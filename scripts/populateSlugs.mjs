import { createClient } from \'@supabase/supabase-js\';\nimport slugify from \'slugify\';\nimport \'dotenv/config\'; // Carrega as variáveis do .env\n\n// Carrega as variáveis de ambiente\nconst SUPABASE_URL = process.env.VITE_SUPABASE_URL;\n// IMPORTANTE: Use a Service Key para scripts de servidor que alteram o banco.\n// A Anon Key (VITE_SUPABASE_ANON_KEY) não terá permissão.\nconst SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;\n\nif (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {\n  throw new Error(\"As variáveis de ambiente VITE_SUPABASE_URL e SUPABASE_SERVICE_KEY precisam estar definidas no arquivo .env\");\n}\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);\n\nasync function populateSlugs() {\n  console.log(\'Buscando todos os prospects...\');\n  const { data: prospects, error } = await supabase.from(\'prospects\').select(\'id, name, slug\');\n\n  if (error) {\n    console.error(\'Erro ao buscar prospects:\', error);\n    return;\n  }\n\n  const prospectsToUpdate = [];\n  const slugMap = new Map();\n\n  for (const prospect of prospects) {\n    // Processa apenas prospects que ainda não têm um slug\n    if (!prospect.slug) {\n      let baseSlug = slugify(prospect.name, { lower: true, strict: true });\n      let finalSlug = baseSlug;\n      let counter = 2;\n\n      // Garante que o slug seja único\n      while (slugMap.has(finalSlug)) {\n        finalSlug = `${baseSlug}-${counter}`;\n        counter++;\n      }\n      \n      slugMap.set(finalSlug, true);\n      prospectsToUpdate.push({ id: prospect.id, slug: finalSlug });\n    }\n  }\n\n  if (prospectsToUpdate.length === 0) {\n    console.log(\'Todos os prospects já possuem slugs. Nada a fazer.\');\n    return;\n  }\n\n  console.log(`Atualizando ${prospectsToUpdate.length} prospects...`);\n\n  // CORREÇÃO: Usar updates individuais em paralelo para não alterar outras colunas\n  const updatePromises = prospectsToUpdate.map(p => \n    supabase.from(\'prospects\').update({ slug: p.slug }).eq(\'id\', p.id)\n  );\n\n  const results = await Promise.all(updatePromises);\n\n  const failedUpdates = results.filter(res => res.error);\n\n  if (failedUpdates.length > 0) {\n    console.error(\'Ocorreram erros ao atualizar alguns prospects:\');\n    failedUpdates.forEach(fail => {\n      console.error(`- ID: ${fail.query.match(/id=eq\.(\w+-\w+-\w+-\w+-\w+)/)[1]}, Erro: ${fail.error.message}`);\n    });\n  } else {\n    console.log(\'Slugs atualizados com sucesso!\');\n  }\n}\n\npopulateSlugs();\n
