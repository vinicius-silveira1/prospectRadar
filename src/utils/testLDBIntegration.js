/**
 * TESTE MANUAL DA INTEGRA√á√ÉO LDB
 * 
 * Este arquivo permite testar manualmente a coleta da LDB
 * para diagn√≥stico de problemas.
 */

import { fetchRealLDBAthletes, getLDBSystemHealth } from '../services/realLDBService.js';

// Fun√ß√£o de teste que pode ser chamada no console do navegador
window.testLDBIntegration = async () => {
  console.log('üß™ INICIANDO TESTE DA INTEGRA√á√ÉO LDB...');
  console.log('=====================================');
  
  try {
    // 1. Verificar sa√∫de do sistema
    console.log('üìä 1. Verificando sa√∫de do sistema...');
    const health = getLDBSystemHealth();
    console.log('‚úÖ Sistema LDB:', health);
    
    // 2. Tentar coleta real
    console.log('\nüîç 2. Tentando coleta real da LDB...');
    const startTime = Date.now();
    
    const athletes = await fetchRealLDBAthletes();
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚è±Ô∏è Tempo de coleta: ${duration}ms`);
    console.log(`üìä Atletas coletados: ${athletes?.length || 0}`);
    
    if (athletes && athletes.length > 0) {
      console.log('‚úÖ SUCESSO! Dados reais coletados da LDB');
      console.log('üë§ Primeiro atleta:', athletes[0]);
      
      // Analisa qualidade dos dados
      const withStats = athletes.filter(a => a.stats && Object.keys(a.stats).length > 0);
      const withImages = athletes.filter(a => a.imageUrl);
      const withTeams = athletes.filter(a => a.team || a.school);
      
      console.log('\nüìà AN√ÅLISE DE QUALIDADE:');
      console.log(`üèÄ Com estat√≠sticas: ${withStats.length}/${athletes.length}`);
      console.log(`üñºÔ∏è Com imagens: ${withImages.length}/${athletes.length}`);
      console.log(`üè´ Com times: ${withTeams.length}/${athletes.length}`);
      
      return {
        success: true,
        count: athletes.length,
        duration,
        quality: {
          withStats: withStats.length,
          withImages: withImages.length,
          withTeams: withTeams.length
        },
        data: athletes
      };
      
    } else {
      console.log('‚ö†Ô∏è AVISO: Nenhum atleta coletado');
      console.log('üí° Poss√≠veis causas:');
      console.log('   - Site da LNB mudou estrutura');
      console.log('   - Problemas de conectividade');
      console.log('   - Bloqueio CORS');
      console.log('   - P√°gina n√£o encontrada');
      
      return {
        success: false,
        count: 0,
        duration,
        error: 'Nenhum atleta encontrado'
      };
    }
    
  } catch (error) {
    console.error('‚ùå ERRO na integra√ß√£o LDB:', error);
    console.log('\nüîß DIAGN√ìSTICO:');
    console.log(`   Tipo: ${error.name}`);
    console.log(`   Mensagem: ${error.message}`);
    
    if (error.code === 'NETWORK_ERROR') {
      console.log('   üåê Problema de rede detectado');
    } else if (error.message.includes('CORS')) {
      console.log('   üö´ Problema de CORS detectado');
    } else if (error.code === 'TIMEOUT') {
      console.log('   ‚è∞ Timeout na requisi√ß√£o');
    }
    
    return {
      success: false,
      count: 0,
      error: error.message,
      type: error.name
    };
  }
};

// Fun√ß√£o para testar apenas a conectividade
window.testLDBConnectivity = async () => {
  console.log('üåê TESTANDO CONECTIVIDADE COM LNB...');
  
  try {
    const response = await fetch('https://lnb.com.br/ldb/', { 
      method: 'HEAD',
      mode: 'no-cors' // Evita problemas de CORS no teste
    });
    
    console.log('‚úÖ Site LNB acess√≠vel');
    return true;
    
  } catch (error) {
    console.log('‚ùå Site LNB inacess√≠vel:', error.message);
    return false;
  }
};

// Instru√ß√µes para uso
console.log(`
üß™ COMANDOS DE TESTE DISPON√çVEIS:

# Teste completo da integra√ß√£o
testLDBIntegration()

# Teste simples de conectividade  
testLDBConnectivity()

# Verificar sa√∫de do sistema
getLDBSystemHealth()

Abra o Console do navegador (F12) e execute os comandos acima.
`);

export { };  // Torna este um m√≥dulo ES6
