/**
 * üîç TESTE DIAGN√ìSTICO LDB - Conectividade
 * 
 * Este script testa diretamente a conectividade com a LDB
 * para identificar onde est√° o problema
 */

// Fun√ß√£o para testar conectividade b√°sica
async function testLDBConnectivity() {
  console.log('üîÑ Testando conectividade com LDB...');
  
  try {
    // Teste 1: Verificar se a URL da LDB est√° acess√≠vel
    const response = await fetch('https://lnb.com.br/ldb/atletas/', {
      method: 'GET',
      headers: {
        'User-Agent': 'ProspectRadar/1.0 Test',
        'Accept': 'text/html,application/xhtml+xml',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.5'
      }
    });
    
    console.log(`üìä Status HTTP: ${response.status}`);
    console.log(`üìÑ Tipo de conte√∫do: ${response.headers.get('content-type')}`);
    
    if (response.ok) {
      const html = await response.text();
      console.log(`‚úÖ Conectividade OK - ${html.length} caracteres recebidos`);
      console.log(`üîç Preview: ${html.substring(0, 300)}...`);
      
      // An√°lise simples do HTML
      const hasAtletasText = html.toLowerCase().includes('atletas');
      const hasPlayerText = html.toLowerCase().includes('player');
      const hasJogadorText = html.toLowerCase().includes('jogador');
      
      console.log(`üìã Cont√©m "atletas": ${hasAtletasText}`);
      console.log(`üìã Cont√©m "player": ${hasPlayerText}`);
      console.log(`üìã Cont√©m "jogador": ${hasJogadorText}`);
      
      return {
        success: true,
        status: response.status,
        htmlLength: html.length,
        hasRelevantContent: hasAtletasText || hasPlayerText || hasJogadorText
      };
    } else {
      console.log(`‚ùå Falha HTTP: ${response.status} - ${response.statusText}`);
      return { success: false, error: `HTTP ${response.status}` };
    }
    
  } catch (error) {
    console.error('‚ùå Erro de conectividade:', error.message);
    
    // Diagn√≥stico do tipo de erro
    if (error.message.includes('CORS')) {
      console.log('üö´ Problema: CORS policy blocking request');
      console.log('üí° Solu√ß√£o: Implementar proxy ou server-side scraping');
    } else if (error.message.includes('network')) {
      console.log('üåê Problema: Falha de rede ou conectividade');
    } else if (error.message.includes('fetch')) {
      console.log('üîå Problema: Fetch API n√£o dispon√≠vel ou bloqueado');
    }
    
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para testar integra√ß√£o completa
async function testLDBIntegration() {
  console.log('üöÄ Iniciando teste completo da integra√ß√£o LDB...');
  
  try {
    // Import din√¢mico do servi√ßo (caminho correto)
    const { fetchRealLDBAthletes } = await import('../services/realLDBService.js');
    
    console.log('üì¶ Servi√ßo LDB carregado com sucesso');
    
    // Teste da fun√ß√£o principal
    const athletes = await fetchRealLDBAthletes();
    
    console.log(`‚úÖ Integra√ß√£o funcionando: ${athletes.length} atletas`);
    
    if (athletes.length > 0) {
      console.log('üìã Primeiro atleta:', athletes[0]);
      console.log('üéØ Todos os atletas t√™m source:', athletes.every(a => a.source));
      
      const realLDBAthletes = athletes.filter(a => a.source?.includes('LDB') && !a.source?.includes('Fallback'));
      console.log(`üî¥ Atletas REAIS da LDB: ${realLDBAthletes.length}`);
      console.log(`üìã Atletas FALLBACK: ${athletes.length - realLDBAthletes.length}`);
      
      return {
        success: true,
        totalAthletes: athletes.length,
        realLDBAthletes: realLDBAthletes.length,
        fallbackAthletes: athletes.length - realLDBAthletes.length,
        sampleAthlete: athletes[0]
      };
    } else {
      console.log('‚ö†Ô∏è Nenhum atleta retornado - verificar implementa√ß√£o');
      return { success: false, error: 'No athletes returned' };
    }
    
  } catch (error) {
    console.error('‚ùå Erro na integra√ß√£o:', error.message);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para verificar configura√ß√£o do ambiente
function checkEnvironment() {
  console.log('üîç Verificando configura√ß√£o do ambiente...');
  
  const useRealData = import.meta?.env?.VITE_USE_REAL_DATA;
  const nodeEnv = import.meta?.env?.VITE_NODE_ENV;
  
  console.log(`üìã VITE_USE_REAL_DATA: ${useRealData}`);
  console.log(`üìã VITE_NODE_ENV: ${nodeEnv}`);
  console.log(`üìã Development mode: ${import.meta?.env?.DEV}`);
  
  const isConfiguredForRealData = useRealData === 'true';
  
  if (!isConfiguredForRealData) {
    console.log('‚ö†Ô∏è AVISO: Aplica√ß√£o n√£o est√° configurada para usar dados reais');
    console.log('üí° Solu√ß√£o: Definir VITE_USE_REAL_DATA=true no .env');
  }
  
  return {
    useRealData,
    nodeEnv,
    isConfiguredForRealData,
    isDev: import.meta?.env?.DEV
  };
}

// Fun√ß√£o completa de diagn√≥stico
async function fullLDBDiagnostic() {
  console.log('ü©∫ DIAGN√ìSTICO COMPLETO LDB');
  console.log('=====================================');
  
  // 1. Verificar ambiente
  console.log('\n1Ô∏è‚É£ Verificando ambiente...');
  const envCheck = checkEnvironment();
  
  // 2. Testar conectividade
  console.log('\n2Ô∏è‚É£ Testando conectividade...');
  const connectivityTest = await testLDBConnectivity();
  
  // 3. Testar integra√ß√£o
  console.log('\n3Ô∏è‚É£ Testando integra√ß√£o...');
  const integrationTest = await testLDBIntegration();
  
  // 4. Relat√≥rio final
  console.log('\nüìä RELAT√ìRIO FINAL');
  console.log('=====================================');
  console.log('Ambiente:', envCheck.isConfiguredForRealData ? '‚úÖ OK' : '‚ùå Incorreto');
  console.log('Conectividade:', connectivityTest.success ? '‚úÖ OK' : '‚ùå Falhou');
  console.log('Integra√ß√£o:', integrationTest.success ? '‚úÖ OK' : '‚ùå Falhou');
  
  if (integrationTest.success) {
    console.log(`\nüéØ RESULTADO: ${integrationTest.realLDBAthletes} atletas reais da LDB`);
    if (integrationTest.realLDBAthletes === 0) {
      console.log('‚ö†Ô∏è AVISO: Sistema est√° funcionando mas usando dados fallback');
      console.log('üí° Poss√≠vel causa: Site da LDB mudou estrutura HTML');
    }
  }
  
  return {
    environment: envCheck,
    connectivity: connectivityTest,
    integration: integrationTest
  };
}

// Exportar fun√ß√µes para uso no console
window.testLDBConnectivity = testLDBConnectivity;
window.testLDBIntegration = testLDBIntegration;
window.fullLDBDiagnostic = fullLDBDiagnostic;

console.log('üîß Fun√ß√µes de debug dispon√≠veis:');
console.log('- testLDBConnectivity()');
console.log('- testLDBIntegration()');
console.log('- fullLDBDiagnostic()');
